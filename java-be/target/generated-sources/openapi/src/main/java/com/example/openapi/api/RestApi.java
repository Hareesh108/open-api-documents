/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.8.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.example.openapi.api;

import com.example.openapi.model.CreateApplicantDtoRequest;
import com.example.openapi.model.CreateApplicantDtoResponse;
import com.example.openapi.model.CreateWorkflowRunDtoRequest;
import com.example.openapi.model.CreateWorkflowRunDtoResponse;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-10-03T11:18:37.730717329+05:30[Asia/Kolkata]", comments = "Generator version: 7.8.0")
@Validated
@Tag(name = "rest", description = "the rest API")
public interface RestApi {

    default RestApiDelegate getDelegate() {
        return new RestApiDelegate() {};
    }

    /**
     * POST /rest/api/v1/callback : Handle webhook callbacks
     * Handles callbacks from external systems.
     *
     * @param body  (required)
     * @return Callback received and processed successfully. (status code 200)
     *         or Error processing webhook. (status code 500)
     */
    @Operation(
        operationId = "restApiV1CallbackPost",
        summary = "Handle webhook callbacks",
        description = "Handles callbacks from external systems.",
        responses = {
            @ApiResponse(responseCode = "200", description = "Callback received and processed successfully.", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = String.class))
            }),
            @ApiResponse(responseCode = "500", description = "Error processing webhook.", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/rest/api/v1/callback",
        produces = { "text/plain" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<String> restApiV1CallbackPost(
        @Parameter(name = "body", description = "", required = true) @Valid @RequestBody Object body
    ) {
        return getDelegate().restApiV1CallbackPost(body);
    }


    /**
     * POST /rest/api/v1/create-applicant : Create a new applicant
     * Creates a new applicant in Onfido and returns the applicant details.
     *
     * @param createApplicantDtoRequest  (required)
     * @return Applicant created successfully. (status code 200)
     *         or Invalid request payload. (status code 400)
     */
    @Operation(
        operationId = "restApiV1CreateApplicantPost",
        summary = "Create a new applicant",
        description = "Creates a new applicant in Onfido and returns the applicant details.",
        responses = {
            @ApiResponse(responseCode = "200", description = "Applicant created successfully.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CreateApplicantDtoResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid request payload.")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/rest/api/v1/create-applicant",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<CreateApplicantDtoResponse> restApiV1CreateApplicantPost(
        @Parameter(name = "CreateApplicantDtoRequest", description = "", required = true) @Valid @RequestBody CreateApplicantDtoRequest createApplicantDtoRequest
    ) {
        return getDelegate().restApiV1CreateApplicantPost(createApplicantDtoRequest);
    }


    /**
     * POST /rest/api/v1/create-workflow-run : Create a new workflow run
     * Creates a new workflow run for the given applicant and workflow ID.
     *
     * @param createWorkflowRunDtoRequest  (required)
     * @return Workflow run created successfully. (status code 200)
     *         or Invalid request payload. (status code 400)
     */
    @Operation(
        operationId = "restApiV1CreateWorkflowRunPost",
        summary = "Create a new workflow run",
        description = "Creates a new workflow run for the given applicant and workflow ID.",
        responses = {
            @ApiResponse(responseCode = "200", description = "Workflow run created successfully.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CreateWorkflowRunDtoResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid request payload.")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/rest/api/v1/create-workflow-run",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<CreateWorkflowRunDtoResponse> restApiV1CreateWorkflowRunPost(
        @Parameter(name = "CreateWorkflowRunDtoRequest", description = "", required = true) @Valid @RequestBody CreateWorkflowRunDtoRequest createWorkflowRunDtoRequest
    ) {
        return getDelegate().restApiV1CreateWorkflowRunPost(createWorkflowRunDtoRequest);
    }


    /**
     * GET /rest/api/v1/retrieve-workflow-run : Retrieve a list of workflow runs
     * Retrieves a list of all workflow runs.
     *
     * @return List of workflow runs retrieved successfully. (status code 200)
     */
    @Operation(
        operationId = "restApiV1RetrieveWorkflowRunGet",
        summary = "Retrieve a list of workflow runs",
        description = "Retrieves a list of all workflow runs.",
        responses = {
            @ApiResponse(responseCode = "200", description = "List of workflow runs retrieved successfully.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = CreateWorkflowRunDtoResponse.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/v1/retrieve-workflow-run",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<CreateWorkflowRunDtoResponse>> restApiV1RetrieveWorkflowRunGet(
        
    ) {
        return getDelegate().restApiV1RetrieveWorkflowRunGet();
    }


    /**
     * GET /rest/api/v1/retrieve-workflow-run/{workflowRunId} : Retrieve a specific workflow run
     * Retrieves the details of a specific workflow run by ID.
     *
     * @param workflowRunId The ID of the workflow run to retrieve. (required)
     * @return Workflow run retrieved successfully. (status code 200)
     *         or Workflow run not found. (status code 404)
     */
    @Operation(
        operationId = "restApiV1RetrieveWorkflowRunWorkflowRunIdGet",
        summary = "Retrieve a specific workflow run",
        description = "Retrieves the details of a specific workflow run by ID.",
        responses = {
            @ApiResponse(responseCode = "200", description = "Workflow run retrieved successfully.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CreateWorkflowRunDtoResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Workflow run not found.")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/v1/retrieve-workflow-run/{workflowRunId}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<CreateWorkflowRunDtoResponse> restApiV1RetrieveWorkflowRunWorkflowRunIdGet(
        @Parameter(name = "workflowRunId", description = "The ID of the workflow run to retrieve.", required = true, in = ParameterIn.PATH) @PathVariable("workflowRunId") String workflowRunId
    ) {
        return getDelegate().restApiV1RetrieveWorkflowRunWorkflowRunIdGet(workflowRunId);
    }

}
